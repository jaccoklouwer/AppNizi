<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="17" hostname="LAPTOP-F3U3PBBP" name="pytest" skipped="0" tests="32" time="66.942" timestamp="2019-11-04T16:52:11.327172"><testcase classname="py_test" file="py_test.py" line="282" name="test_getwaterconsumptionbydate" time="2.082"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">def test_getwaterconsumptionbydate():
        v = Validator(waterconsumptiondailyschema)
&gt;       j = getwaterconsumptionbydate()

py_test.py:285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
py_test.py:281: in getwaterconsumptionbydate
    j= r.json()
C:\Users\jacco\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\requests\models.py:897: in json
    return complexjson.loads(self.text, **kwargs)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\__init__.py:348: in loads
    return _default_decoder.decode(s)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x000001B9D0F76788&gt;, s = &apos;&apos;, idx = 0

    def raw_decode(self, s, idx=0):
        &quot;&quot;&quot;Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        &quot;&quot;&quot;
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="py_test" file="py_test.py" line="296" name="test_getwaterconsumptionbydates" time="0.000"><failure message="assert 1 == 2">def test_getwaterconsumptionbydates():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:298: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="309" name="test_postanddeleteconsumption" time="2.167"><failure message="TypeError: &apos;method&apos; object is not subscriptable">def test_postanddeleteconsumption():
        j = postconsumption()
        #j = r.json()
    
&gt;       r2 = deleteconsumption(j[&apos;id&apos;])
E       TypeError: &apos;method&apos; object is not subscriptable

py_test.py:314: TypeError</failure></testcase><testcase classname="py_test" file="py_test.py" line="320" name="test_getconsumptionbyid" time="2.122"></testcase><testcase classname="py_test" file="py_test.py" line="330" name="test_getconsumptionbydate" time="2.047"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">def test_getconsumptionbydate():
        v = Validator(consumptiondateschema)
&gt;       j = getconsumptionbydate()

py_test.py:333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
py_test.py:329: in getconsumptionbydate
    j= r.json()
C:\Users\jacco\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\requests\models.py:897: in json
    return complexjson.loads(self.text, **kwargs)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\__init__.py:348: in loads
    return _default_decoder.decode(s)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x000001B9D0F76788&gt;
s = &apos;Invalid date value(s). Date format: yyyy-MM-dd&apos;, idx = 0

    def raw_decode(self, s, idx=0):
        &quot;&quot;&quot;Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        &quot;&quot;&quot;
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="py_test" file="py_test.py" line="339" name="test_putconsumption" time="0.001"><failure message="assert 1 == 2">def test_putconsumption():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:341: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="350" name="test_postwaterconsumption" time="2.114"></testcase><testcase classname="py_test" file="py_test.py" line="357" name="test_getwaterconsumption" time="2.172"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">def test_getwaterconsumption():
        v = Validator(waterconsumptionschema)
&gt;       j = getwaterconsumption()

py_test.py:360: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
py_test.py:356: in getwaterconsumption
    j= r.json()
C:\Users\jacco\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\requests\models.py:897: in json
    return complexjson.loads(self.text, **kwargs)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\__init__.py:348: in loads
    return _default_decoder.decode(s)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x000001B9D0F76788&gt;, s = &apos;&apos;, idx = 0

    def raw_decode(self, s, idx=0):
        &quot;&quot;&quot;Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        &quot;&quot;&quot;
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="py_test" file="py_test.py" line="366" name="test_putwaterconsumption" time="0.001"><failure message="assert 1 == 2">def test_putwaterconsumption():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:368: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="371" name="test_deletewaterconsumption" time="0.002"><failure message="assert 1 == 2">def test_deletewaterconsumption():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:373: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="379" name="test_getpatients" time="2.130"></testcase><testcase classname="py_test" file="py_test.py" line="387" name="test_getpatientbyid" time="2.085"></testcase><testcase classname="py_test" file="py_test.py" line="395" name="test_deletepatient" time="0.000"><failure message="assert 1 == 2">def test_deletepatient():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:397: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="410" name="test_getpatientme" time="0.002"><failure message="assert 1 == 2">def test_getpatientme():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:412: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="418" name="test_getdoctors" time="2.101"></testcase><testcase classname="py_test" file="py_test.py" line="425" name="test_postdoctor" time="0.002"><failure message="assert 1 == 2">def test_postdoctor():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:427: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="431" name="test_getdoctorbyid" time="2.070"></testcase><testcase classname="py_test" file="py_test.py" line="438" name="test_deletedoctor" time="0.001"><failure message="assert 1 == 2">def test_deletedoctor():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:440: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="444" name="test_getdoctorpatients" time="0.001"><failure message="assert 1 == 2">def test_getdoctorpatients():
&gt;       assert 1==2
E       assert 1 == 2

py_test.py:446: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="450" name="test_getdoctorme" time="0.000"></testcase><testcase classname="py_test" file="py_test.py" line="454" name="test_putdietarymanagement" time="2.145"><failure message="assert 400 == 200
 +  where 400 = &lt;Response [400]&gt;.status_code">def test_putdietarymanagement():
        r = requests.put(urlLocal+dietarymanagement+&quot;/8&quot;, data= json.dumps(dietarymanagementitem), headers = header)
&gt;       assert r.status_code == 200
E       assert 400 == 200
E        +  where 400 = &lt;Response [400]&gt;.status_code

py_test.py:457: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="458" name="test_deletedietarymanagement" time="2.234"><failure message="assert 400 == 200
 +  where 400 = &lt;Response [400]&gt;.status_code">def test_deletedietarymanagement():
        r = requests.delete(urlLocal+dietarymanagement+&quot;/8&quot;, headers = header)
&gt;       assert r.status_code == 200
E       assert 400 == 200
E        +  where 400 = &lt;Response [400]&gt;.status_code

py_test.py:461: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="462" name="test_postdietarymanagement" time="2.114"><failure message="assert 400 == 200
 +  where 400 = &lt;Response [400]&gt;.status_code">def test_postdietarymanagement():
        r = requests.post(urlLocal+dietarymanagement, data = json.dumps(dietarymanagementitem), headers=header)
&gt;       assert r.status_code == 200
E       assert 400 == 200
E        +  where 400 = &lt;Response [400]&gt;.status_code

py_test.py:465: AssertionError</failure></testcase><testcase classname="py_test" file="py_test.py" line="466" name="test_getdietarymanagement" time="19.778"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">def test_getdietarymanagement():
        r = requests.get(urlLocal+dietarymanagement+&quot;/17&quot; ,headers=header)
&gt;       j = r.json()

py_test.py:469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\jacco\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\requests\models.py:897: in json
    return complexjson.loads(self.text, **kwargs)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\__init__.py:348: in loads
    return _default_decoder.decode(s)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x000001B9D0F76788&gt;
s = &apos;The connection was not closed. &apos;, idx = 0

    def raw_decode(self, s, idx=0):
        &quot;&quot;&quot;Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        &quot;&quot;&quot;
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.1520.0_x64__qbz5n2kfra8p0\lib\json\decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="py_test" file="py_test.py" line="519" name="test_putmeal" time="2.137"></testcase><testcase classname="py_test" file="py_test.py" line="522" name="test_foodsearch" time="2.132"></testcase><testcase classname="py_test" file="py_test.py" line="527" name="test_getfoodbyid" time="2.124"></testcase><testcase classname="py_test" file="py_test.py" line="532" name="test_postfoodfavorite" time="2.106"></testcase><testcase classname="py_test" file="py_test.py" line="535" name="test_getfoodfavorites" time="2.084"></testcase><testcase classname="py_test" file="py_test.py" line="539" name="test_deletefoodfavorite" time="2.138"></testcase><testcase classname="py_test" file="py_test.py" line="542" name="test_getmeal" time="2.109"></testcase><testcase classname="py_test" file="py_test.py" line="547" name="test_postanddeletemeal" time="4.372"></testcase></testsuite></testsuites>