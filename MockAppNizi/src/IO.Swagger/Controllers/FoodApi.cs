/*
 * App Nizi API
 *
 * The API for the Nizi-app
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FoodApiController : ControllerBase
    { 
        /// <summary>
        /// Delete a food item from the diary of the user
        /// </summary>
        /// <remarks>Get method that returns a food name from the input of the user. This method can be called while the user types the name.</remarks>
        /// <param name="foodConsumptionId"></param>
        /// <response code="200">Succesful</response>
        /// <response code="401">No authorization</response>
        /// <response code="404">Failed</response>
        [HttpDelete]
        [Route("/McSmoker/NierZiektenConcept/1.0.0//food")]
        [ValidateModelState]
        [SwaggerOperation("DeleteFoodItem")]
        public virtual IActionResult DeleteFoodItem([FromRoute][Required]int? foodConsumptionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get the name and ID from the database
        /// </summary>
        /// <remarks>Get method that returns a food name from the input of the user. This method can be called while the user types the name.</remarks>
        /// <param name="foodName"></param>
        /// <response code="200">Succesful</response>
        /// <response code="400">Failed</response>
        /// <response code="401">No authorization</response>
        /// <response code="404">No food item available</response>
        [HttpGet]
        [Route("/McSmoker/NierZiektenConcept/1.0.0//food")]
        [ValidateModelState]
        [SwaggerOperation("GetFood")]
        [SwaggerResponse(statusCode: 200, type: typeof(Food), description: "Succesful")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Failed")]
        public virtual IActionResult GetFood([FromRoute][Required]string foodName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Food));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"foodId\" : 3307,\n  \"foodName\" : \"Aardappel\"\n}, {\n  \"foodId\" : 3308,\n  \"foodName\" : \"Aardbei\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Food>(exampleJson)
                        : default(Food);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add amount of a food item to the diary
        /// </summary>
        /// <remarks>The user can put an amount of food (in grams) in their diary.</remarks>
        /// <param name="body">Add the amount of a specific food Item to the diary</param>
        /// <response code="200">Succesful</response>
        /// <response code="401">No authorization</response>
        /// <response code="404">Failed</response>
        [HttpPost]
        [Route("/McSmoker/NierZiektenConcept/1.0.0//food")]
        [ValidateModelState]
        [SwaggerOperation("PostFoodItem")]
        public virtual IActionResult PostFoodItem([FromBody]Addingfood body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
