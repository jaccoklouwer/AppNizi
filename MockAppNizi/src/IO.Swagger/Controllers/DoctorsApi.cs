/*
 * App Nizi API
 *
 * The API for the Nizi-app
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DoctorsApiController : ControllerBase
    { 
        /// <summary>
        /// Returns patient id&#x27;s from doctor
        /// </summary>
        /// <remarks>Retrieves all patients for logged-in doctor.</remarks>
        /// <response code="200">Succesfully retrieved patients</response>
        /// <response code="401">Not authorized to get patients</response>
        [HttpGet]
        [Route("/McSmoker/NierZiektenConcept/1.0.0//doctor/patients")]
        [ValidateModelState]
        [SwaggerOperation("GetAllPatientsForDoctor")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<List<AccountNameAndId>>), description: "Succesfully retrieved patients")]
        public virtual IActionResult GetAllPatientsForDoctor()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<List<AccountNameAndId>>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"John Doe\",\n  \"id\" : 1\n}, {\n  \"name\" : \"Susan Smith\",\n  \"id\" : 2\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<List<AccountNameAndId>>>(exampleJson)
                        : default(List<List<AccountNameAndId>>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a patient
        /// </summary>
        /// <remarks>Retrieves specific patient for logged-in doctor.</remarks>
        /// <param name="patientId">The id of the patient</param>
        /// <response code="200">Succesfully retrieved patient</response>
        /// <response code="401">Not authorized to get patient</response>
        [HttpGet]
        [Route("/McSmoker/NierZiektenConcept/1.0.0//doctor/patients/{patientId}")]
        [ValidateModelState]
        [SwaggerOperation("GetPatientByPatientIdForLoggedInDoctor")]
        [SwaggerResponse(statusCode: 200, type: typeof(Patient), description: "Succesfully retrieved patient")]
        public virtual IActionResult GetPatientByPatientIdForLoggedInDoctor([FromRoute][Required]int? patientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Patient));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"birthdate\" : \"2019-08-30\",\n  \"patientId\" : 4334,\n  \"doctorId\" : 123,\n  \"weight\" : [ {\n    \"amount\" : \"83.50\",\n    \"unit\" : \"kg\"\n  }, {\n    \"amount\" : \"83.50\",\n    \"unit\" : \"kg\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Patient>(exampleJson)
                        : default(Patient);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns patient id&#x27;s from a doctor
        /// </summary>
        /// <remarks>Retrieve all patients listed under a given doctor.</remarks>
        /// <param name="doctorId">the id of the doctor</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not authorized to get patients</response>
        [HttpGet]
        [Route("/McSmoker/NierZiektenConcept/1.0.0//doctors/{doctorId}/patients")]
        [ValidateModelState]
        [SwaggerOperation("GetPatientsForDoctorId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<List<AccountNameAndId>>), description: "OK")]
        public virtual IActionResult GetPatientsForDoctorId([FromRoute][Required]int? doctorId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<List<AccountNameAndId>>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"John Doe\",\n  \"id\" : 1\n}, {\n  \"name\" : \"Susan Smith\",\n  \"id\" : 2\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<List<AccountNameAndId>>>(exampleJson)
                        : default(List<List<AccountNameAndId>>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns the perioddiary from a patient
        /// </summary>
        /// <remarks>Retrieves the perioddiary for a patient for the logged-in doctor.</remarks>
        /// <param name="patientId">The id of the patient</param>
        /// <param name="beginDate">the beginning of a period</param>
        /// <param name="endDate">the end of a period</param>
        /// <response code="200">Succesfully retrieved patients</response>
        /// <response code="400">Bad input parameter</response>
        /// <response code="401">Not authorized to get period-diary of patient</response>
        [HttpGet]
        [Route("/McSmoker/NierZiektenConcept/1.0.0//doctor/patients/{patientId}/periodDiary")]
        [ValidateModelState]
        [SwaggerOperation("GetperioddiaryForPatientId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Diary>), description: "Succesfully retrieved patients")]
        public virtual IActionResult GetperioddiaryForPatientId([FromRoute][Required]int? patientId, [FromQuery][Required()]string beginDate, [FromQuery][Required()]string endDate)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Diary>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"patientId\" : 4334,\n  \"diaryId\" : 4334,\n  \"consumedfoods\" : [ {\n    \"date\" : \"date\",\n    \"kcal\" : \"kcal\",\n    \"sodium\" : \"sodium\",\n    \"foodName\" : \"foodName\",\n    \"amount\" : \"amount\",\n    \"fiber\" : \"fiber\",\n    \"calcium\" : \"calcium\",\n    \"protein\" : \"protein\",\n    \"food_id\" : 0,\n    \"diary_id\" : 6\n  }, {\n    \"date\" : \"date\",\n    \"kcal\" : \"kcal\",\n    \"sodium\" : \"sodium\",\n    \"foodName\" : \"foodName\",\n    \"amount\" : \"amount\",\n    \"fiber\" : \"fiber\",\n    \"calcium\" : \"calcium\",\n    \"protein\" : \"protein\",\n    \"food_id\" : 0,\n    \"diary_id\" : 6\n  } ],\n  \"representingDate\" : \"2019-08-30\"\n}, {\n  \"patientId\" : 4334,\n  \"diaryId\" : 4334,\n  \"consumedfoods\" : [ {\n    \"date\" : \"date\",\n    \"kcal\" : \"kcal\",\n    \"sodium\" : \"sodium\",\n    \"foodName\" : \"foodName\",\n    \"amount\" : \"amount\",\n    \"fiber\" : \"fiber\",\n    \"calcium\" : \"calcium\",\n    \"protein\" : \"protein\",\n    \"food_id\" : 0,\n    \"diary_id\" : 6\n  }, {\n    \"date\" : \"date\",\n    \"kcal\" : \"kcal\",\n    \"sodium\" : \"sodium\",\n    \"foodName\" : \"foodName\",\n    \"amount\" : \"amount\",\n    \"fiber\" : \"fiber\",\n    \"calcium\" : \"calcium\",\n    \"protein\" : \"protein\",\n    \"food_id\" : 0,\n    \"diary_id\" : 6\n  } ],\n  \"representingDate\" : \"2019-08-30\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Diary>>(exampleJson)
                        : default(List<Diary>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
