/*
 * App Nizi API
 *
 * The API for the Nizi-app
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PersonalDietaryManagement : IEquatable<PersonalDietaryManagement>
    { 
        /// <summary>
        /// Gets or Sets PersonalDietaryManagementId
        /// </summary>
        [Required]
        [DataMember(Name="personalDietaryManagement_id")]
        public int? PersonalDietaryManagementId { get; set; }

        /// <summary>
        /// Gets or Sets MaxAmount
        /// </summary>
        [Required]
        [DataMember(Name="maxAmount")]
        public string MaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets PatientId
        /// </summary>
        [Required]
        [DataMember(Name="patientId")]
        public int? PatientId { get; set; }

        /// <summary>
        /// Gets or Sets DietaryManagementId
        /// </summary>
        [Required]
        [DataMember(Name="dietaryManagement_id")]
        public int? DietaryManagementId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [Required]
        [DataMember(Name="active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets DesirableAmount
        /// </summary>
        [Required]
        [DataMember(Name="desirableAmount")]
        public string DesirableAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalDietaryManagement {\n");
            sb.Append("  PersonalDietaryManagementId: ").Append(PersonalDietaryManagementId).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  PatientId: ").Append(PatientId).Append("\n");
            sb.Append("  DietaryManagementId: ").Append(DietaryManagementId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DesirableAmount: ").Append(DesirableAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonalDietaryManagement)obj);
        }

        /// <summary>
        /// Returns true if PersonalDietaryManagement instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonalDietaryManagement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalDietaryManagement other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PersonalDietaryManagementId == other.PersonalDietaryManagementId ||
                    PersonalDietaryManagementId != null &&
                    PersonalDietaryManagementId.Equals(other.PersonalDietaryManagementId)
                ) && 
                (
                    MaxAmount == other.MaxAmount ||
                    MaxAmount != null &&
                    MaxAmount.Equals(other.MaxAmount)
                ) && 
                (
                    PatientId == other.PatientId ||
                    PatientId != null &&
                    PatientId.Equals(other.PatientId)
                ) && 
                (
                    DietaryManagementId == other.DietaryManagementId ||
                    DietaryManagementId != null &&
                    DietaryManagementId.Equals(other.DietaryManagementId)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    DesirableAmount == other.DesirableAmount ||
                    DesirableAmount != null &&
                    DesirableAmount.Equals(other.DesirableAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PersonalDietaryManagementId != null)
                    hashCode = hashCode * 59 + PersonalDietaryManagementId.GetHashCode();
                    if (MaxAmount != null)
                    hashCode = hashCode * 59 + MaxAmount.GetHashCode();
                    if (PatientId != null)
                    hashCode = hashCode * 59 + PatientId.GetHashCode();
                    if (DietaryManagementId != null)
                    hashCode = hashCode * 59 + DietaryManagementId.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (DesirableAmount != null)
                    hashCode = hashCode * 59 + DesirableAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonalDietaryManagement left, PersonalDietaryManagement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonalDietaryManagement left, PersonalDietaryManagement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
