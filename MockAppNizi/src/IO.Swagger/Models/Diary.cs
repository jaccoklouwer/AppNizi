/*
 * App Nizi API
 *
 * The API for the Nizi-app
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Diary : IEquatable<Diary>
    { 
        /// <summary>
        /// Gets or Sets DiaryId
        /// </summary>
        [DataMember(Name="diaryId")]
        public int? DiaryId { get; set; }

        /// <summary>
        /// Gets or Sets PatientId
        /// </summary>
        [Required]
        [DataMember(Name="patientId")]
        public int? PatientId { get; set; }

        /// <summary>
        /// Gets or Sets Consumedfoods
        /// </summary>
        [DataMember(Name="consumedfoods")]
        public List<FoodConsumption> Consumedfoods { get; set; }

        /// <summary>
        /// Gets or Sets RepresentingDate
        /// </summary>
        [DataMember(Name="representingDate")]
        public string RepresentingDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Diary {\n");
            sb.Append("  DiaryId: ").Append(DiaryId).Append("\n");
            sb.Append("  PatientId: ").Append(PatientId).Append("\n");
            sb.Append("  Consumedfoods: ").Append(Consumedfoods).Append("\n");
            sb.Append("  RepresentingDate: ").Append(RepresentingDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Diary)obj);
        }

        /// <summary>
        /// Returns true if Diary instances are equal
        /// </summary>
        /// <param name="other">Instance of Diary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Diary other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DiaryId == other.DiaryId ||
                    DiaryId != null &&
                    DiaryId.Equals(other.DiaryId)
                ) && 
                (
                    PatientId == other.PatientId ||
                    PatientId != null &&
                    PatientId.Equals(other.PatientId)
                ) && 
                (
                    Consumedfoods == other.Consumedfoods ||
                    Consumedfoods != null &&
                    Consumedfoods.SequenceEqual(other.Consumedfoods)
                ) && 
                (
                    RepresentingDate == other.RepresentingDate ||
                    RepresentingDate != null &&
                    RepresentingDate.Equals(other.RepresentingDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DiaryId != null)
                    hashCode = hashCode * 59 + DiaryId.GetHashCode();
                    if (PatientId != null)
                    hashCode = hashCode * 59 + PatientId.GetHashCode();
                    if (Consumedfoods != null)
                    hashCode = hashCode * 59 + Consumedfoods.GetHashCode();
                    if (RepresentingDate != null)
                    hashCode = hashCode * 59 + RepresentingDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Diary left, Diary right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Diary left, Diary right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
