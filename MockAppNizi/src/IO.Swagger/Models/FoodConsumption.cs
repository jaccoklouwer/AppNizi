/*
 * App Nizi API
 *
 * The API for the Nizi-app
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FoodConsumption : IEquatable<FoodConsumption>
    { 
        /// <summary>
        /// Gets or Sets FoodId
        /// </summary>
        [DataMember(Name="food_id")]
        public int? FoodId { get; set; }

        /// <summary>
        /// Gets or Sets DiaryId
        /// </summary>
        [DataMember(Name="diary_id")]
        public int? DiaryId { get; set; }

        /// <summary>
        /// Gets or Sets FoodName
        /// </summary>
        [Required]
        [DataMember(Name="foodName")]
        public string FoodName { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [Required]
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [Required]
        [DataMember(Name="date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Kcal
        /// </summary>
        [Required]
        [DataMember(Name="kcal")]
        public string Kcal { get; set; }

        /// <summary>
        /// Gets or Sets Protein
        /// </summary>
        [Required]
        [DataMember(Name="protein")]
        public string Protein { get; set; }

        /// <summary>
        /// Gets or Sets Fiber
        /// </summary>
        [Required]
        [DataMember(Name="fiber")]
        public string Fiber { get; set; }

        /// <summary>
        /// Gets or Sets Calcium
        /// </summary>
        [Required]
        [DataMember(Name="calcium")]
        public string Calcium { get; set; }

        /// <summary>
        /// Gets or Sets Sodium
        /// </summary>
        [Required]
        [DataMember(Name="sodium")]
        public string Sodium { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FoodConsumption {\n");
            sb.Append("  FoodId: ").Append(FoodId).Append("\n");
            sb.Append("  DiaryId: ").Append(DiaryId).Append("\n");
            sb.Append("  FoodName: ").Append(FoodName).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Kcal: ").Append(Kcal).Append("\n");
            sb.Append("  Protein: ").Append(Protein).Append("\n");
            sb.Append("  Fiber: ").Append(Fiber).Append("\n");
            sb.Append("  Calcium: ").Append(Calcium).Append("\n");
            sb.Append("  Sodium: ").Append(Sodium).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FoodConsumption)obj);
        }

        /// <summary>
        /// Returns true if FoodConsumption instances are equal
        /// </summary>
        /// <param name="other">Instance of FoodConsumption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodConsumption other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FoodId == other.FoodId ||
                    FoodId != null &&
                    FoodId.Equals(other.FoodId)
                ) && 
                (
                    DiaryId == other.DiaryId ||
                    DiaryId != null &&
                    DiaryId.Equals(other.DiaryId)
                ) && 
                (
                    FoodName == other.FoodName ||
                    FoodName != null &&
                    FoodName.Equals(other.FoodName)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Kcal == other.Kcal ||
                    Kcal != null &&
                    Kcal.Equals(other.Kcal)
                ) && 
                (
                    Protein == other.Protein ||
                    Protein != null &&
                    Protein.Equals(other.Protein)
                ) && 
                (
                    Fiber == other.Fiber ||
                    Fiber != null &&
                    Fiber.Equals(other.Fiber)
                ) && 
                (
                    Calcium == other.Calcium ||
                    Calcium != null &&
                    Calcium.Equals(other.Calcium)
                ) && 
                (
                    Sodium == other.Sodium ||
                    Sodium != null &&
                    Sodium.Equals(other.Sodium)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FoodId != null)
                    hashCode = hashCode * 59 + FoodId.GetHashCode();
                    if (DiaryId != null)
                    hashCode = hashCode * 59 + DiaryId.GetHashCode();
                    if (FoodName != null)
                    hashCode = hashCode * 59 + FoodName.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Kcal != null)
                    hashCode = hashCode * 59 + Kcal.GetHashCode();
                    if (Protein != null)
                    hashCode = hashCode * 59 + Protein.GetHashCode();
                    if (Fiber != null)
                    hashCode = hashCode * 59 + Fiber.GetHashCode();
                    if (Calcium != null)
                    hashCode = hashCode * 59 + Calcium.GetHashCode();
                    if (Sodium != null)
                    hashCode = hashCode * 59 + Sodium.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FoodConsumption left, FoodConsumption right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FoodConsumption left, FoodConsumption right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
