openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'App Nizi API'
  description: 'The API for the Nizi-app'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/KEVIN73/nizi/1.0.0
  - description: Anne SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/McSmoker/NierZiektenConcept/1.0.0/
  - description: Jacco SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jaccoklouwer/App_Nizi/1.0.0
  - description: Martin SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/martinstork/AppNiZi/1.0.0
  - description: Kevin SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/KEVIN73/app-nizi_api/1.0.0
paths:
  
  # patients
  /patients:
    get:
      tags:
        - patients
      operationId: GetPatients
      summary: Returns patients
      description: Retrieve an array of patients.
      security:
        - oAuth2: [admin]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/patient'
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
    post:
      tags:
        - patients
      operationId: PostPatient
      summary: Creates a patient
      description: Create a new patient.
      security:
        - oAuth2: [admin]
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/patient'
      responses:
        '200':
          description: (200) OK!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patient'
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /patients/me:
    get:
      tags:
        - patients
      operationId: GetMyPatient
      summary: Returns users's patient
      description: Retrieve the current user's patient data.
      security:
        - oAuth2: [patient]
      responses:
        '200':
          description: (200) Success.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/patient'  
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /patients/{patientId}:
    get:
      tags:
        - patients
      operationId: GetPatientByPatientId
      summary: Returns patient with id
      description: Retrieve an existing patient.
      security:
        - oAuth2: [doctor]
      parameters:
        - $ref: '#/components/parameters/patientId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/patient'
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
    delete:
      tags:
        - patients
      operationId: DeletePatient
      summary: Deletes a patient
      description: Delete an existing patient.
      security:
        - oAuth2: [admin]
      parameters:
        - $ref: '#/components/parameters/patientId'
      responses:
        '200':
          description: (200) Removed!
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
    patch:
      tags:
        - patients
      operationId: PatchPatient
      summary: Patches a patient
      description: Patch an existing patient.
      security:
        - oAuth2: [doctor]
      parameters:
        - $ref: '#/components/parameters/patientId'
      responses:
        '200':
          description: (200) Updated!
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /patients/me/diary/today:
    get:
      tags:
        - patients
      operationId: GetDiaryForToday
      summary: Returns the user's diary from today
      description: Retrieve the user-patient's diary for today.
      security:
        - oAuth2: [patient]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/diary'
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
    post:
      tags:
        - patients
      operationId: PostPatientDiary
      summary: Creates a patient's diary
      description: Create a new patient diary.
      security:
        - oAuth2: [admin]
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/diary'
      responses:
        '200':
          description: (200) OK!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diary'
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
    
  /patients/me/diary/{date}:
    get:
      tags:
        - patients
      operationId: GetDiaryForDate
      summary: Returns the user's diary for a given date
      description: Retrieve the user-patient's diary for a given date.
      security:
        - oAuth2: [patient]
      parameters:
        - $ref: '#/components/parameters/date'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/diary' 
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /patients/{patientId}/diary/today:
    get:
      tags:
        - patients
      operationId: GetDiaryForTodayByPatientId
      summary: Returns a patient's diary from today
      description: Retrieve a given patient's diary for today.
      security:
        - oAuth2: [admin]
      parameters:
        - $ref: '#/components/parameters/patientId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/diary'
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /patients/{patientId}/diary/{date}:
    get:
      tags:
        - patients
      operationId: GetDiaryForDateByPatientId
      summary: Returns a patient's diary for a given date
      description: Retrieve a given patient's diary for a given date.
      security:
        - oAuth2: [doctor]
      parameters:
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/patientId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/diary' 
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  
  #doctors
  /doctor/patients:
    get:
      tags:
        - doctors
      operationId: GetAllPatientsForDoctor
      summary: Returns patient id's from doctor
      description: Retrieves all patients for logged-in doctor.
      security:
        - oAuth2: [doctor]
      responses:
        '200':
          description: Succesfully retrieved patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/patient'
        '401':
          description: Not authorized to get patients
  /doctor/patients/{patientId}:
    get:
      tags:
        - doctors
      operationId: GetPatientByPatientIdForLoggedInDoctor
      summary: Returns a patient
      description: Retrieves specific patient for logged-in doctor.
      security:
        - oAuth2: [doctor]
      parameters:
        - $ref: '#/components/parameters/patientId'
      responses:
        '200':
          description: Succesfully retrieved patient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patient'
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /doctor/patients/{patientId}/periodDiary:
    get:
      tags:
        - doctors
      operationId: GetperioddiaryForPatientId
      summary: Returns the perioddiary from a patient
      description: Retrieves the perioddiary for a patient for the logged-in doctor.
      security:
        - oAuth2: [doctor]
      parameters:
        - $ref: '#/components/parameters/patientId'
        - $ref: '#/components/parameters/beginDate'
        - $ref: '#/components/parameters/endDate'
      responses:
        '200':
          description: Succesfully retrieved patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/diary'
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  #waterConsumption
  /waterConsumption:
    post:
      tags:
        - waterConsumption
      operationId: PostWaterConsumption
      summary: Inserts the waterconsumption
      description: Insert the WaterConsumption.
      security:
        - oAuth2: [patient]
      requestBody:
        $ref: '#/components/requestBodies/WaterConsumption'
      responses:
        '200':
          description: OK
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /WaterConsumption/{patientId}:
    get:
      tags:
        - waterConsumption
      operationId: GetWaterConsumptionByPatientId
      summary: Returns the waterconsumption of a patient
      description: get the WaterConsumption of a patient.
      security:
        - oAuth2: [patient, doctor]
      parameters:
        - $ref: '#/components/parameters/patientId' 
      responses:
        '200':
          description: OK
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  #dietaryManagement
  /dietarymanagement/{DietId}:
    delete:
      tags:
        - dietaryManagement
      operationId: DeleteMyDietaryManagement
      summary: Deletes the diatarymanagement of a patient
      description: Deletes the dietarymanagement of a patient.
      security:
        - oAuth2: [doctor]
      parameters:
        - $ref: '#/components/parameters/dietId'
      responses:
        '200':
          description: OK
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /dietaryManagement:
    put:
      tags:
        - dietaryManagement
      operationId: PutDietaryManagement
      summary: Edits the dietarymanagement of a patient
      description: Edits the dietarymanagement of a patient.
      security:
        - oAuth2: [doctor]
      requestBody:
        $ref: '#/components/requestBodies/dietarymanagment'
      responses:
        '200':
          description: OK
        '400':
          description: (400) Bad request. Data malformed?
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
  /dietaryManagement/{patientId}:
    get:
      tags:
        - dietaryManagement
      operationId: GetAllDietaryManagementForPatient
      summary: Returns all nutrients of a patient
      description: Retrieves all dietarymanagment of the patient.
      security:
        - oAuth2: [patient, doctor]
      parameters:
        - $ref: '#/components/parameters/patientId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nutrient'
        401:
          description: you are unauthorized to see these patients dietary manegment
        403:
          description: this is not your dietary management
        404:
          description: this patient is not found
  #account
  /account/login:
    post:
      tags:
        - account
      operationId: Login
      summary: Logs user in
      description: Logs user in.
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: johndoe@mail.com
                  password:
                    type: string
                    example: supersecretpassword1
      responses:
        '200':
          description: User login finished
          content:
            application/json:
              schema:
                type: object
                properties:
                  AuthToken:
                    type: string
                    example: "1-4343-47637-43764383-4637673"
        '401':
          description: not authorized to login? maybe you made a typo?
  /account/registerPatient:
    post:
      tags:
        - account
      operationId: Register
      summary: Registers a patient
      description: Registers a new patient.
      security:
        - oAuth2: [doctor]
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: johndoe@mail.com
                  password:
                    type: string
                    example: supersecretpassword1
                  name:
                    type: string
                    example: benito franco
      responses:
        '200':
          description: patient registered and ready to party
        '401':
          description: not authorized to register a patient
        '400':
          description: (400) Bad request. Data malformed?
        '404':
          description: (404) Resource not found.
  /account/registerDoctor:
    post:
      tags:
        - account
      operationId: RegisterDoctor
      summary: Registers a doctor
      description: Registers a new doctor.
      security:
        - oAuth2: [admin]
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: johndoe@mail.com
                  password:
                    type: string
                    example: supersecretpassword
      responses:
        '200':
          description: doctor registered
        '401':
          description: not authorized to register a doctor     
        '400':
          description: (400) Bad request. Data malformed?
        '404':
          description: (404) Resource not found.
  /account/updatepatient:
    put:
      tags:
        - account
      operationId: PutPassword
      summary: Sets a patient's password
      description: Sets the patient's new password.
      security:
        - oAuth2: [patient]
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  password:
                    type: string
                    example: supersecretpassword2
      responses:
        '200':
          description: patient updated
        '401':
          description: not authorized to login 
        '400':
          description: (400) Bad request. Data malformed?
        '404':
          description: (404) Resource not found.
  #food
  /food:
    get:
      tags:
        - food
      operationId: GetFood
      summary: Get the name and ID from the database
      description: Get method that returns a food name from the input of the user. This method can be called while the user types the name.
      security:
        - oAuth2: [patient, doctor]
      parameters:
        - in: path
          name: foodName
          required: true
          schema:
            type: string
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/food'
        400:
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: No authorization
        404:
          description: No food item available

    post:
      tags:
        - food
      operationId: PostFoodItem
      summary: Add amount of a food item to the diary
      description: The user can put an amount of food (in grams) in their diary.
      security:
        - oAuth2: [patient]    
      requestBody:
        $ref: '#/components/requestBodies/Addfood'
      responses:
        200:
          description: Succesful
        401: 
          description: No authorization
        404: 
          description: Failed

    delete:
      tags:
        - food
      operationId: DeleteFoodItem
      summary: Delete a food item from the diary of the user
      description: Get method that returns a food name from the input of the user. This method can be called while the user types the name.
      security:
        - oAuth2: [patient, doctor]
      parameters:
        - in: path
          name: foodConsumptionId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Succesful
        401: 
          description: No authorization
        404: 
          description: Failed

  /test:
    get:
      tags:
        - test
      summary: test call
      operationId: TestCall
      description: Calling this allows you to fetch the test data
      responses:
        '200':
          description: the test data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestObject'
        '400':
          description: (400) Bad request.
        '401':
          description: (401) Not authorized.
        '404':
          description: (404) Resource not found.
components:
  schemas:
    weight:
      type: object
      required:
        - amount
        - unit
      properties:
        amount:
         type: string
         example: "83.50"
        unit:
         type: string
         enum:
           - "kg"
           - "g"
           - "mg"
           - "lb"
           - "oz"
         example: "kg"
    patient:
      allOf:
        - $ref: '#/components/schemas/account'
        - type: object
          properties:
            patientId:
              type: integer
              example: 4334
            doctorId:
              type: integer
              example: 123
            birthdate:
              type: string
              example: "2019-08-30"
            weight:
              $ref: '#/components/schemas/weight'
    diary:
      type: object
      required:
        - patientId
      properties:
        diaryId:
         type: integer
         example: 4334
        patientId:
         type: integer
         example: 4334
        consumedfoods:
         type: array
         items:
           $ref: '#/components/schemas/foodConsumption'
        representingDate:
         type: string
         example: "2019-08-30"
    Nutrient:
      type: object
      properties:
        Name:
          type: string
        Amount:
          type: integer
        Active:
          type: boolean
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    TestObject:
      type: object
      required:
        - id
        - description
      properties:
        id:
          type: integer
        description:
          type: string
          example: This is object number X
    account:
      type: object
      required:
        - account_id
        - name
        - password
        - passwordSalt
        - email
      properties:
        account_id:
          type: integer
        patientId:
          type: integer
        name:
          type: string
        password:
          type: string
        passwordSalt:
          type: string
        email:
          type: string
    doctor:
      allOf:
        - $ref: '#/components/schemas/account'
        - type: object
          required:
            - doctor_id
            - location
          properties:
            doctor_id:
             type: integer
            birthdate:
             type: integer
    dietarymanagement:
      type: object
      required:
        - dietarymanagement_id
        - maxAmount
        - patientId
        - dietaryManagement_id
        - active
        - desirableAmount
      properties:
        id:
         type: integer
        amount:
         type: string
        patientId:
         type: integer
        dietaryRestrictionid:
         type: integer
        active:
         type: boolean
    DietaryRestriction:
      type: object
      required:
        - id
        - description
      properties:
        id:
         type: integer
        description:
         type: string
    waterConsumption:
      type: object
      required:
        - water_id
        - date
        - amount
        - patientId
      properties:
        water_id:
         type: integer
        date:
         type: string
        amount:
         type: string
        patientId:
         type: integer
    # food:
    #   type: object
    #   required:
    #     - foodConsumptionId
    #     - diaryId
    #     - amount
    #     - date
    #   properties:
    #     foodId:
    #      type: integer
    #      example: 4334
    #     diaryId:
    #      type: integer
    #      example: 742
    #     amount:
    #       type: integer
    #       example: 200
    #     date:
    #      type: string
    #      example: "2018-06-13"

    consumption:
      type: object
      required:
        - id
        - diaryId
        - foodName
        - amount
        - date
        - kcal
        - protein
        - fiber
        - calcium
        - sodium
      properties:
        food_id:
         type: integer
        diary_id:
         type: integer
        foodName:
         type: string
        amount: 
         type: string
        date:
         type: string
        kcal:
         type: string
        protein:
         type: string
        fiber:
         type: string
        calcium:
         type: string
        sodium:
         type: string
  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  parameters:
    endDate:
      name: endDate
      in: query
      required: true
      description: the end of a period
      schema:
        type: string
        example: "2019-09-30"
    beginDate:
      name: beginDate
      in: query
      required: true
      description: the beginning of a period
      schema:
        type: string
        example: "2019-08-30"
    patientId:
      name: patientId
      in: path
      required: true
      description: The id of the patient
      schema:
        type: integer
    date:
      name: date
      in: path
      required: true
      description: A date value.
      schema:
        type: string
        example: "2019-08-30"
    dietId:
      name: dietId
      in: path
      required: true
      description: the id of the diet
      schema:
        type: integer
    doctorId:
      name: doctorId
      in: path
      required: true
      description: the id of the doctor
      schema:
        type: integer
  requestBodies:
    dietarymanagment:
      description: the diet management that needs to be updated
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updatedDietmangement'
    WaterConsumption:
      description: the water consumption of that day
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/waterConsumption'
    Addfood:
      description: Add the amount of a specific food Item to the diary
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/addingfood'

  securitySchemes:
    oAuth2: 
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://domain.test/api/oauth/dialog'
          scopes:
            read: example read scope
            patient: Only patients
            doctor: Only Doctors
            admin: Only for administrators
            write: example write scope