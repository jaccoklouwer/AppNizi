openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'App Nizi API'
  description: 'The API for the Nizi-app'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/McSmoker/NierZiektenConcept/1.0.0/
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jaccoklouwer/App_Nizi/1.0.0
  - description: Martin SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/martinstork/AppNiZi/1.0.0
paths:
  /WaterConsumption:
    post:
      description: insert the WaterConsumption
      requestBody:
        $ref: '#/components/requestBodies/WaterConsumption'
      responses:
        '200':
          description: OK
  /WaterConsumption/{patient_id}:
    get:
      description: get the WaterConsumption of a patient
      parameters:
        - $ref: '#/components/parameters/patient_id' 
      responses:
        '200':
          description: OK
  /personaldietarymanagement/{DietId}:
    delete:
      description: Deletes the dietarymanagement of a patient
      parameters:
        - $ref: '#/components/parameters/DietId'
      responses:
        '200':
          description: OK
  /dietaryManagement:
    put:
      description: Edits the dietarymanagement of a patient
      requestBody:
        $ref: '#/components/requestBodies/dietarymanagment'
      responses:
        '200':
          description: OK
  /dietaryManagement/{patient_id}:
    get:
      description: Retrieves all dietarymanagment of the patient
      parameters:
        - $ref: '#/components/parameters/patient_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nutrient'
  /account/login:
    post:
      tags:
        - account
      description: Logs user in
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: johndoe@mail.com
                  password:
                    type: string
                    example: supersecretpassword1
      responses:
        '200':
          description: User login finished
          content:
            application/json:
              schema:
                type: object
                properties:
                  AuthToken:
                    type: string
                    example: "1-4343-47637-43764383-4637673"
        '401':
          description: not authorized to login? maybe you made a typo?
  /account/registerPatient:
    post:
      tags:
        - account
      description: Registers a new patient
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: johndoe@mail.com
                  password:
                    type: string
                    example: supersecretpassword1
                  name:
                    type: string
                    example: benito franco
      responses:
        '200':
          description: Patient registered and ready to party
        '401':
          description: not authorized to register a patient(are you logged in as a doctor?)
  /account/registerDoctor:
    post:
      tags:
        - account
      description: Registers a new doctor
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: johndoe@mail.com
                  password:
                    type: string
                    example: supersecretpassword
      responses:
        '200':
          description: Doctor registered
        '401':
          description: not authorized to update             
  /account/updatePatient:
    put:
      tags:
        - account
      description: sets the patients new password
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  password:
                    type: string
                    example: supersecretpassword2
      responses:
        '200':
          description: Patient updated
        '401':
          description: not authorized to login 
  /doctor/patients:
    get:
      tags:
        - doctor
      summary: returns patient id's from doctor
      description: Retrieves all patients for logged-in doctor
      security:
        - oAuth2: [doctor]
      responses:
        '200':
          description: Succesfully retrieved patients
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  items:
                    $ref: '#/components/schemas/AccountNameAndId'
                example:    # Child of media type
                  - name: 'John Doe'
                    id: 1
                  - name: 'Susan Smith'
                    id: 2
        '401':
          description: Not authorized to get patients
  /doctor/patients/{patient_id}/weekDiary:
    get:
      tags:
        - doctor
      summary: returns weekdiary from patient
      description: Retrieves all patients for logged-in doctor
      security:
        - oAuth2: [doctor]
      parameters:
        - $ref: '#/components/parameters/patient_id'
      responses:
        '200':
          description: Succesfully retrieved patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dairy'
        '400':
          description: Bad input parameter
        '401':
          description: Not authorized to get patients       
  /food:
    get:
      tags:
        - food
      summary: Get the name and ID from the database
      description: Get method that returns a food name from the input of the user. This method can be called while the user types the name.
      security:
        - oAuth2: [patient, doctor]
      parameters:
        - in: path
          name: foodName
          required: true
          schema:
            type: string
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        400:
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: No authorization
        404:
          description: No food item available

    post:
      tags:
        - food
      summary: Add amount of a food item to the diary
      description: The user can put an amount of food (in grams) in their diary.
      security:
        - oAuth2: [patient]    
      requestBody:
        $ref: '#/components/requestBodies/AddFood'
      responses:
        200:
          description: Succesful
        401: 
          description: No authorization
        404: 
          description: Failed

    delete:
      tags:
        - food
      summary: Delete a food item from the diary of the user
      description: Get method that returns a food name from the input of the user. This method can be called while the user types the name.
      security:
        - oAuth2: [patient, doctor]
      parameters:
        - in: path
          name: foodConsumptionId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Succesful
        401: 
          description: No authorization
        404: 
          description: Failed

             
  /test:
    get:
      tags:
        - test
      summary: test call
      operationId: TestCall
      description: Calling this allows you to fetch the test data
      responses:
        '200':
          description: the test data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestObject'
        '400':
          description: bad input parameter
components:
  schemas:
    updatedDietmangement:
      type: object
      properties:
        DietId:
          type: integer
        Amount:
          type: integer
        patientId:
          type: integer
        doctorId:
          type: integer
    Nutrient:
      type: object
      properties:
        Name:
          type: string
        Amount:
          type: integer
        Active:
          type: boolean
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    TestObject:
      type: object
      required:
        - id
        - description
      properties:
        id:
          type: integer
        description:
          type: string
          example: This is object number X
    Account:
      type: object
      required:
        - account_id
        - doctor_id
        - name
        - password
        - passwordSalt
        - email
      properties:
        account_id:
          type: integer
        patient_id:
          type: integer
        doctor_id:
          type: integer
        name:
          type: string
        password:
          type: string
        passwordSalt:
          type: string
        email:
          type: string
    AccountNameAndId:
      type: object
      properties:
        name:
          type: string
          example: 'John Doe'
        accountId:
          type: integer
          example: 1
    Patient:
      type: object
      required:
        - patient_id
        - birthdate
        - doctor_id
        - weight
        - dairy_id
      properties:
        account:
          $ref: 'components/schema/Account'
        patient_id:
         type: integer
        birthdate:
         type: string
        doctor_id:
         type: integer
        weight:
         type: integer
        dairy_id:
         type: integer
    Doctor:
      type: object
      required:
        - doctor_id
        - location
      properties:
        account:
          $ref: 'components/schema/Account'
        doctor_id:
         type: integer
        birthdate:
         type: integer
    PersonalDietaryManagement:
      type: object
      required:
        - personalDietaryManagement_id
        - maxAmount
        - patient_id
        - dietaryManagement_id
        - active
        - desirableAmount
      properties:
        personalDietaryManagement_id:
         type: integer
        maxAmount:
         type: string
        patient_id:
         type: integer
        dietaryManagement_id:
         type: integer
        active:
         type: boolean
        desirableAmount:
         type: string
    DietaryManagement:
      type: object
      required:
        - dietaryManagement_id
        - description
      properties:
        dietaryManagement_id:
         type: integer
        description:
         type: string
    WaterConsumption:
      type: object
      required:
        - water_id
        - date
        - amount
        - patient_id
      properties:
        water_id:
         type: integer
        date:
         type: string
        amount:
         type: string
        patient_id:
         type: integer
    Dairy:
      type: object
      required:
        - dairy_id
        - patient_id
      properties:
        dairy_id:
          type: integer
        patient_id:
          type: integer

    Food:
      type: array
      required:
        - foodName
      items:
        type: object
        properties:
          foodId:
            type: integer
          foodName:
            type: string
      example:
        - foodId: 3307
          foodName: Aardappel
        - foodId: 3308
          foodName: Aardbei

    AddingFood:
      type: object
      required:
        - foodConsumptionId
        - diaryId
        - amount
        - date
      properties:
        foodId:
         type: integer
         example: 4334
        diaryId:
         type: integer
         example: 742
        amount:
          type: integer
          example: 200
        date:
         type: string
         example: "2018-06-13"

    FoodConsumption:
      type: object
      required:
        - foodConsumptionId
        - dairyId
        - foodName
        - amount
        - date
        - kcal
        - protein
        - fiber
        - calcium
        - sodium
      properties:
        food_id:
         type: integer
        dairy_id:
         type: integer
        foodName:
         type: string
        amount: 
         type: string
        date:
         type: string
        kcal:
         type: string
        protein:
         type: string
        fiber:
         type: string
        calcium:
         type: string
        sodium:
         type: string
  
  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  parameters:
    patient_id:
      name: patient_id
      in: path
      required: true
      description: the id of the patient
      schema:
        type: integer
    DietId:
      name: DietId
      in: path
      required: true
      description: the id of the diet
      schema:
        type: integer
  
  requestBodies:
    dietarymanagment:
      description: the diet management that needs to be updated
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updatedDietmangement'
    WaterConsumption:
      description: the water consumption of that day
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WaterConsumption'
    AddFood:
      description: Add the amount of a specific food Item to the diary
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddingFood'

  securitySchemes:
    oAuth2: 
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://domain.test/api/oauth/dialog'
          scopes:
            read: example read scope
            patient: Only patients
            doctor: Only Doctors
            write: example write scope