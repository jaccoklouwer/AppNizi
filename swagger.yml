openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'App Nizi Api'
  description: 'The Api for the Nizi-app'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/McSmoker/NierZiektenConcept/1.0.0/
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jaccoklouwer/App_Nizi/1.0.0
  - description: Martin SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/martinstork/AppNiZi/1.0.0
paths:
  /login:
    post:
      tags:
        - account
      description: Logs user in
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: johndoe@mail.com
                  password:
                    type: string
                    example: supersecretpassword
      responses:
        '200':
          description: User login finished
          content:
            application/json:
              schema:
                type: object
                properties:
                  AuthToken:
                    type: string
                    example: "1-4343-47637-43764383-4637673"
        '401':
          description: not authorized to login
          
  /test:
    get:
      tags:
        - test
      summary: test call
      operationId: TestCall
      description: Calling this allows you to fetch the test data
      responses:
        '200':
          description: the test data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestObject'
        '400':
          description: bad input parameter
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    TestObject:
      type: object
      required:
        - id
        - description
      properties:
        id:
          type: integer
        description:
          type: string
          example: This is object number X
    Account:
      type: object
      required:
        - account_id
        - doctor_id
        - name
        - password
        - passwordSalt
        - email
      properties:
        account_id:
          type: integer
        patient_id:
          type: integer
        doctor_id:
          type: integer
        name:
          type: string
        password:
          type: string
        passwordSalt:
          type: string
        email:
          type: string
    Patient:
      type: object
      required:
        - patient_id
        - birthdate
        - doctor_id
        - weight
        - dairy_id
      properties:
        account:
          $ref: 'components/schema/Account'
        patient_id:
         type: integer
        birthdate:
         type: string
        doctor_id:
         type: integer
        weight:
         type: integer
        dairy_id:
         type: integer
    Doctor:
      type: object
      required:
        - doctor_id
        - location
      properties:
        account:
          $ref: 'components/schema/Account'
        doctor_id:
         type: integer
        birthdate:
         type: integer
    PersonalDietaryManagement:
      type: object
      required:
        - personalDietaryManagement_id
        - maxAmount
        - patient_id
        - dietaryManagement_id
        - active
        - desirableAmount
      properties:
        personalDietaryManagement_id:
         type: integer
        maxAmount:
         type: string
        patient_id:
         type: integer
        dietaryManagement_id:
         type: integer
        active:
         type: boolean
        desirableAmount:
         type: string
    DietaryManagement:
      type: object
      required:
        - dietaryManagement_id
        - description
      properties:
        dietaryManagement_id:
         type: integer
        description:
         type: string
    WaterConsumption:
      type: object
      required:
        - water_id
        - date
        - amount
        - patient_id
      properties:
        water_id:
         type: integer
        date:
         type: string
        amount:
         type: string
        patient_id:
         type: integer
    Dairy:
      type: object
      required:
        - dairy_id
        - patient_id
      properties:
        dairy_id:
          type: integer
        patient_id:
          type: integer
    Food:
      type: object
      required:
        - food_id
        - dairy_id
        - foodName
        - amount
        - date
        - kcal
        - protein
        - fiber
        - calcium
        - sodium
      properties:
        food_id:
         type: integer
        dairy_id:
         type: integer
        foodName:
         type: string
        amount: 
         type: string
        date:
         type: string
        kcal:
         type: string
        protein:
         type: string
        fiber:
         type: string
        calcium:
         type: string
        sodium:
         type: string
  # securitySchemes:
  #   oauth2:
  #     type: oauth2
  #     flows:
  #       authorizationCode:
  #         authorizationUrl: /oauth/dialog
  #         tokenUrl: /oauth/token
  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
